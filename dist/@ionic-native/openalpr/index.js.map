{"version":3,"sources":["../../../src/@ionic-native/plugins/openalpr/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAiBxE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AASH;IAA8B,4BAAiB;IAR/C;QAAA,qEAoCC;QA3BC,aAAO,GAAG;YACR,EAAE,EAAE,IAAI;YACR,EAAE,EAAE,IAAI;YACR,GAAG,EAAE,KAAK;YACV,EAAE,EAAE,IAAI;YACR,EAAE,EAAE,IAAI;YACR,GAAG,EAAE,KAAK;YACV,EAAE,EAAE,IAAI;YACR,GAAG,EAAE,KAAK;SACX,CAAC;;IAkBJ,CAAC;IAhBC;;;;;OAKG;IAEH,uBAAI,GAAJ,UAAK,SAAc,EAAE,OAAyB;QAC5C,MAAM,CAAC;IACT,CAAC;IACI,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IARA;QADC,OAAO,EAAE;;;;wCAGT;IArBU,QAAQ;QARpB,MAAM,CAAC;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,yBAAyB;YACjC,SAAS,EAAE,0BAA0B;YACrC,IAAI,EAAE,oDAAoD;YAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,QAAQ,CA4BpB;IAAD,eAAC;CA5BD,AA4BC,CA5B6B,iBAAiB,GA4B9C;SA5BY,QAAQ","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface OpenALPROptions {\n  /** Country used for scanning the license plate */\n  country?: string;\n\n  /** Amount of results returned */\n  amount?: number;\n}\n\nexport interface OpenALPRResult {\n  /** LicensePlate */\n  number: string;\n  /** Probability */\n  confidence: number;\n}\n\n/**\n * @name OpenALPR\n * @description\n * This Cordova plugin adds support for the OpenALPR (Automatic License Plate Recognition) library, which provides support for retrieving the license plate from a picture.\n *\n * @usage\n * ```typescript\n * import { OpenALPR, OpenALPROptions, OpenALPRResult } from '@ionic-native/openalpr';\n *\n *\n * constructor(private openALPR: OpenALPR) { }\n *\n * const scanOptions: OpenALPROptions = {\n *    country: this.openALPR.Country.EU,\n *    amount: 3\n * }\n *\n * // To get imageData, you can use the @ionic-native/camera module for example. It works with DestinationType.FILE_URI and DATA_URL\n *\n * this.openALPR.scan(imageData, scanOptions)\n *   .then((res: [OpenALPRResult]) => console.log(res))\n *   .catch((error: Error) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'OpenALPR',\n  plugin: 'cordova-plugin-openalpr',\n  pluginRef: 'cordova.plugins.OpenALPR',\n  repo: 'https://github.com/iMicknl/cordova-plugin-openalpr',\n  platforms: ['Android', 'iOS']\n})\n\nexport class OpenALPR extends IonicNativePlugin {\n  Country = {\n    AU: 'au',\n    BR: 'br',\n    BR2: 'br2',\n    EU: 'eu',\n    IN: 'in',\n    KR2: 'kr2',\n    US: 'us',\n    VN2: 'vn2'\n  };\n\n  /**\n   * This function does something\n   * @param imageData {any} Base64 encoding of the image data or the image file URI\n   * @param options {OpenALPROptions} Options to pass to the OpenALPR scanner\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  scan(imageData: any, options?: OpenALPROptions): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}