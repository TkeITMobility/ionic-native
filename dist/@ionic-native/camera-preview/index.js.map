{"version":3,"sources":["../../../src/@ionic-native/plugins/camera-preview/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface CameraPreviewDimensions {\n  /** The width of the camera preview, default to window.screen.width */\n  width?: number;\n\n  /** The height of the camera preview, default to window.screen.height */\n  height?: number;\n}\n\nexport interface CameraPreviewOptions {\n  /** The left edge in pixels, default 0 */\n  x?: number;\n\n  /** The top edge in pixels, default 0 */\n  y?: number;\n\n  /** The width in pixels, default window.screen.width */\n  width?: number;\n\n  /** The height in pixels, default window.screen.height */\n  height?: number;\n\n  /** Choose the camera to use 'front' or 'rear', default 'front' */\n  camera?: string;\n\n  /** Tap to take a photo, default true (picture quality by default : 85) */\n  tapPhoto?: boolean;\n\n  /** Preview box drag across the screen, default 'false' */\n  previewDrag?: boolean;\n\n  /** Preview box to the back of the webview (true => back, false => front) , default false */\n  toBack?: boolean;\n\n  /** Alpha channel of the preview box, float, [0,1], default 1 */\n  alpha?: number;\n\n  /** Tap to set specific focus point. Note, this assumes the camera is full-screen. default false */\n  tapToFocus?: boolean;\n\n  /** On Android disable automatic rotation of the image and stripping of Exit header. default false */\n  disableExifHeaderStripping?: boolean;\n}\n\nexport interface CameraPreviewPictureOptions {\n  /** The width in pixels, default 0 */\n  width?: number;\n  /** The height in pixels, default 0 */\n  height?: number;\n  /** The picture quality, 0 - 100, default 85 */\n  quality?: number;\n}\n\n/**\n * @beta\n * @name Camera Preview\n * @description\n * Showing camera preview in HTML\n *\n * Requires Cordova plugin: `https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git`. For more info, please see the [Cordova Camera Preview docs](https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview).\n *\n * @usage\n * ```typescript\n * import { CameraPreview, CameraPreviewPictureOptions, CameraPreviewOptions, CameraPreviewDimensions } from '@ionic-native/camera-preview';\n *\n * constructor(private cameraPreview: CameraPreview) { }\n *\n * ...\n *\n * // camera options (Size and location). In the following example, the preview uses the rear camera and display the preview in the back of the webview\n * const cameraPreviewOpts: CameraPreviewOptions = {\n *   x: 0,\n *   y: 0,\n *   width: window.screen.width,\n *   height: window.screen.height,\n *   camera: 'rear',\n *   tapPhoto: true,\n *   previewDrag: true,\n *   toBack: true,\n *   alpha: 1\n * };\n *\n * // start camera\n * this.cameraPreview.startCamera(cameraPreviewOpts).then(\n *   (res) => {\n *     console.log(res)\n *   },\n *   (err) => {\n *     console.log(err)\n *   });\n *\n * // Set the handler to run every time we take a picture\n * this.cameraPreview.setOnPictureTakenHandler().subscribe((result) => {\n *   console.log(result);\n *   // do something with the result\n * });\n *\n *\n * // picture options\n * const pictureOpts: CameraPreviewPictureOptions = {\n *   width: 1280,\n *   height: 1280,\n *   quality: 85\n * }\n *\n * // take a picture\n * this.cameraPreview.takePicture(this.pictureOpts).then((imageData) => {\n *   this.picture = 'data:image/jpeg;base64,' + imageData;\n * }, (err) => {\n *   console.log(err);\n *   this.picture = 'assets/img/test.jpg';\n * });\n *\n *\n * // Switch camera\n * this.cameraPreview.switchCamera();\n *\n * // set color effect to negative\n * this.cameraPreview.setColorEffect('negative');\n *\n * // Stop the camera preview\n * this.cameraPreview.stopCamera();\n *\n * ```\n *\n * @interfaces\n * CameraPreviewOptions\n * CameraPreviewPictureOptions\n * CameraPreviewDimensions\n */\n@Plugin({\n  pluginName: 'CameraPreview',\n  plugin: 'cordova-plugin-camera-preview',\n  pluginRef: 'CameraPreview',\n  repo:\n    'https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview',\n  platforms: ['Android', 'iOS']\n})\n\nexport class CameraPreview extends IonicNativePlugin {\n  FOCUS_MODE = {\n    FIXED: 'fixed',\n    AUTO: 'auto',\n    CONTINUOUS: 'continuous', // IOS Only\n    CONTINUOUS_PICTURE: 'continuous-picture', // Android Only\n    CONTINUOUS_VIDEO: 'continuous-video', // Android Only\n    EDOF: 'edof', // Android Only\n    INFINITY: 'infinity', // Android Only\n    MACRO: 'macro' // Android Only\n  };\n\n  EXPOSURE_MODE = {\n    LOCK: 'lock', // IOS Only\n    AUTO: 'auto', // IOS Only\n    CONTINUOUS: 'continuous',\n    CUSTOM: 'custom'\n  };\n\n  FLASH_MODE = {\n    OFF: 'off',\n    ON: 'on',\n    AUTO: 'auto',\n    RED_EYE: 'red-eye',\n    TORCH: 'torch' // Android Only\n  };\n\n  COLOR_EFFECT = {\n    AQUA: 'aqua', // Android Only\n    BLACKBOARD: 'blackboard', // Android Only\n    MONO: 'mono',\n    NEGATIVE: 'negative',\n    NONE: 'none',\n    POSTERIZE: 'posterize',\n    SEPIA: 'sepia',\n    SOLARIZE: 'solarize', // Android Only\n    WHITEBOARD: 'whiteboard' // Android Only\n  };\n\n  CAMERA_DIRECTION = {\n    BACK: 'back',\n    FRONT: 'front'\n  };\n\n  /**\n   * Starts the camera preview instance.\n   * @param {CameraPreviewOptions} options\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  startCamera(options: CameraPreviewOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Stops the camera preview instance. (iOS & Android)\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  stopCamera(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Switch from the rear camera and front camera, if available.\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  switchCamera(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Hide the camera preview box.\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  hide(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Show the camera preview box.\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  show(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Take the picture (base64)\n   * @param {CameraPreviewPictureOptions} [options] size and quality of the picture to take\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  takePicture(options?: CameraPreviewPictureOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * Set camera color effect.\n   * @static\n   * @param {string} effect name : 'none' (iOS & Android), 'aqua' (Android), 'blackboard' (Android), 'mono' (iOS & Android), 'negative' (iOS & Android), 'posterize' (iOS & Android), 'sepia' (iOS & Android), 'solarize' (Android) or 'whiteboard' (Android)\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  setColorEffect(effect: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set the zoom (Android)\n   * @param [zoom] {number} Zoom value\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  setZoom(zoom?: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get the maximum zoom (Android)\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getMaxZoom(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get current zoom (Android)\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getZoom(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set the preview Size\n   * @param {CameraPreviewDimensions} [dimensions]\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  setPreviewSize(dimensions?: CameraPreviewDimensions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get focus mode\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getFocusMode(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set the focus mode\n   * @param {string} [focusMode] 'fixed', 'auto', 'continuous-picture', 'continuous-video' (iOS & Android), 'edof', 'infinity', 'macro' (Android Only)\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  setFocusMode(focusMode?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get supported focus modes\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getSupportedFocusModes(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get the current flash mode\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getFlashMode(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set the flash mode\n   * @param {string} [flashMode] 'off' (iOS & Android), 'on' (iOS & Android), 'auto' (iOS & Android), 'torch' (Android)\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  setFlashMode(flashMode?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get supported flash modes\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getSupportedFlashModes(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get supported picture sizes\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getSupportedPictureSizes(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get exposure mode\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getExposureMode(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get exposure modes\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getExposureModes(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set exposure mode\n   * @param {string} [lock]\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  setExposureMode(lock?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get exposure compensation (Android)\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getExposureCompensation(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set exposure compensation (Android)\n   * @param {number} [exposureCompensation]\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  setExposureCompensation(exposureCompensation?: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get exposure compensation range (Android)\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getExposureCompensationRange(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set specific focus point. Note, this assumes the camera is full-screen.\n   * @param {number} xPoint\n   * @param {number} yPoint\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  tapToFocus(xPoint: number, yPoint: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Add a listener for the back event for the preview\n   * @return {Promise<any>} if back button pressed\n   */\n  @Cordova()\n  onBackButton(): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}