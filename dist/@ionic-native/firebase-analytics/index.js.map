{"version":3,"sources":["../../../src/@ionic-native/plugins/firebase-analytics/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AASH;IAAuC,qCAAiB;IAAxD;;IA8DA,CAAC;IA7DC;;;;;;OAMG;IAEH,oCAAQ,GAAR,UAAS,IAAY,EAAE,MAAW;QAChC,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,qCAAS,GAAT,UAAU,EAAU;QAClB,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,2CAAe,GAAf,UAAgB,IAAY,EAAE,KAAa;QACzC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,sCAAU,GAAV,UAAW,OAAgB;QACzB,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,4CAAgB,GAAhB,UAAiB,IAAY;QAC3B,MAAM,CAAC;IACT,CAAC;IACI,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IApDA;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;qDAGvB;IASD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;sDAGvB;IAUD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;4DAGvB;IAQD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;uDAGvB;IASD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;6DAGvB;IAvDU,iBAAiB;QAR7B,MAAM,CAAC;YACN,UAAU,EAAE,mBAAmB;YAC/B,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,oCAAoC;YAC/C,IAAI,EAAE,iEAAiE;YACvE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,iBAAiB,CA8D7B;IAAD,wBAAC;CA9DD,AA8DC,CA9DsC,iBAAiB,GA8DvD;SA9DY,iBAAiB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @beta\n * @name Firebase Analytics\n * @description\n * Cordova plugin for Firebase Analytics\n *\n * Go to firebase console and export google-services.json and GoogleService-Info.plist. Put those files into the root of your cordova app folder.\n *\n * NOTE: on iOS in order to collect demographic, age, gender data etc. you should additionally include AdSupport.framework into your project.\n *\n * @usage\n * ```typescript\n * import { FirebaseAnalytics } from '@ionic-native/firebase-analytics';\n *\n *\n * constructor(private firebaseAnalytics: FirebaseAnalytics) { }\n *\n * ...\n *\n * this.firebaseAnalytics.logEvent('page_view', {page: \"dashboard\"})\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'FirebaseAnalytics',\n  plugin: 'cordova-plugin-firebase-analytics',\n  pluginRef: 'cordova.plugins.firebase.analytics',\n  repo: 'https://github.com/chemerisuk/cordova-plugin-firebase-analytics',\n  platforms: ['Android', 'iOS']\n})\n\nexport class FirebaseAnalytics extends IonicNativePlugin {\n  /**\n   * Logs an app event.\n   * Be aware of automatically collected events.\n   * @param {string} name The name of the event\n   * @param {any} params Some param to configure something\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({ sync: true })\n  logEvent(name: string, params: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets the user ID property.\n   * This feature must be used in accordance with Google's Privacy Policy.\n   * @param {string} id The user ID\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({ sync: true })\n  setUserId(id: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This feature must be used in accordance with Google's Privacy Policy.\n   * Be aware of automatically collected user properties.\n   * @param {string} name The property name\n   * @param {string} value The property value\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({ sync: true })\n  setUserProperty(name: string, value: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param {boolean} enabled\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({ sync: true })\n  setEnabled(enabled: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * This helps identify the areas in your app where users spend their time and how they interact with your app.\n   * @param {string} name The name of the screen\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({ sync: true })\n  setCurrentScreen(name: string): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}