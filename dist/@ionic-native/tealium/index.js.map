{"version":3,"sources":["../../../src/@ionic-native/plugins/tealium/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAqC3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AAYH;IAA6B,2BAAiB;IAA9C;;IA+IA,CAAC;IA7IC;;;;;OAKG;IAEH,sBAAI,GAAJ,UAAK,MAAkB;QACrB,MAAM,CAAC,CAAC,yDAAyD;IACnE,CAAC;IAED;;;;;OAKG;IAEH,2BAAS,GAAT,UAAU,UAAe,EAAE,YAAoB;QAC7C,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,4BAAU,GAAV,UAAW,UAAe,EAAE,YAAoB;QAC9C,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,uBAAK,GAAL,UAAM,SAAiB,EAAE,UAAe,EAAE,YAAoB;QAC5D,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,+BAAa,GAAb,UAAc,OAAe,EAAE,KAA8B,EAAE,YAAoB;QACjF,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,6BAAW,GAAX,UAAY,OAAe,EAAE,KAAwB,EAAE,YAAoB;QACzE,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,gCAAc,GAAd,UAAe,OAAe,EAAE,YAAoB;QAClD,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,kCAAgB,GAAhB,UAAiB,OAAe,EAAE,YAAoB;QACpD,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,+BAAa,GAAb,UAAc,OAAe,EAAE,YAAoB,EAAE,QAAa;QAChE,MAAM,CAAC;IACT,CAAC;IACH;;;;;;SAMK;IAEH,6BAAW,GAAX,UAAY,OAAe,EAAE,YAAoB,EAAE,QAAa;QAC9D,MAAM,CAAC;IACT,CAAC;IAEA;;;;;;MAME;IAEH,kCAAgB,GAAhB,UAAiB,WAAmB,EAAE,YAAoB,EAAE,QAAa;QACvE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,8BAAY,GAAZ;QACE,MAAM,CAAC;IACT,CAAC;IAEI,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IArIA;QADC,OAAO,EAAE;;;;uCAGT;IASD;QADC,OAAO,EAAE;;;;4CAGT;IASD;QADC,OAAO,EAAE;;;;6CAGT;IAUD;QADC,OAAO,EAAE;;;;wCAGT;IAUD;QADC,OAAO,EAAE;;;;gDAGT;IAUD;QADC,OAAO,EAAE;;;;8CAGT;IASD;QADC,OAAO,EAAE;;;;iDAGT;IASD;QADC,OAAO,EAAE;;;;mDAGT;IAUD;QADC,OAAO,EAAE;;;;gDAGT;IASD;QADC,OAAO,EAAE;;;;8CAGT;IAUD;QADC,OAAO,EAAE;;;;mDAGT;IAOD;QADC,OAAO,EAAE;;;;+CAGT;IAvIU,OAAO;QAVnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,wBAAwB;YAChC,SAAS,EAAE,gBAAgB;YAC3B,IAAI,EAAE,2CAA2C;YACjD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;YAC7B,OAAO,EAAE,EAAE;SACZ,CAAC;OAGW,OAAO,CA+InB;IAAD,cAAC;CA/ID,AA+IC,CA/I4B,iBAAiB,GA+I7C;SA/IY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\nexport interface TealConfig {\n    /**\n     * Your Tealium account name\n     */\n    account: string;\n    /**\n     * Your Tealium profile name\n     */\n    profile: string;\n    /**\n     * Your Tealium environment name (dev, qa, prod)\n     */\n    environment: string;\n    /**\n     * Arbitrary instance name string. Must be consistent for all calls to Tealium API.\n     */\n    instance: string;\n    /**\n     * Enables (\"true\") or disables (\"false\") lifecycle reporting. Default true if omitted.\n     */\n    isLifecycleEnabled?: string;\n    /**\n     * Not usually required. Sets a custom URL override for dispatches to UDH.\n     */\n    collectDispatchURL?: string;\n    /**\n     * Your Tealium UDH profile. Only active if you do not have collectDispatchURL set.\n     */\n    collectDispatchProfile?: string;\n    /**\n     * Enables (\"true\") or disables (\"false\") Crash Reporter module for Android. Default false if omitted.\n     */\n    isCrashReporterEnabled?: string;\n}\n\n/**\n * @paid\n * @name Tealium\n * @description\n * This plugin provides a TypeScript wrapper around the [Tealium](https://www.tealium.com) Cordova plugin for Ionic Native.\n *\n * For full documentation, see [https://community.tealiumiq.com/t5/Mobile-Libraries/Tealium-for-Cordova/ta-p/17618](https://community.tealiumiq.com/t5/Mobile-Libraries/Tealium-for-Cordova/ta-p/17618)\n * @usage\n * ```\n * import { Tealium, TealConfig } from '@ionic-native/tealium';\n *\n *\n * constructor(private tealium: Tealium) { }\n *\n * ...\n *\n * let tealConfig: TealConfig = {\n *  account: \"<your-account>\",\n *  profile: \"<your-profile>\",\n *  environment: \"<your-environment>\", // usually \"dev\", \"qa\" or \"prod\"\n *  isLifecycleEnabled: \"true\", // pass \"false\" to disable lifecycle tracking\n *  isCrashReporterEnabled: \"false\", // pass \"true\" to enable crash reporter (Android only)\n *  instance: \"<your-instance-name\" // an arbitrary instance name. use the same instance name for all subsequent API calls\n * }\n *\n * this.tealium.init(tealConfig).then(()=>{\n *   this.tealium.trackView({\"screen_name\": \"homescreen\"});\n * });\n *\n * ```\n * @interfaces\n * TealConfig\n */\n\n@Plugin({\n  pluginName: 'Tealium',\n  plugin: 'tealium-cordova-plugin', // npm package name, example: cordova-plugin-camera\n  pluginRef: 'window.tealium', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: 'https://github.com/Tealium/cordova-plugin', // the github repository URL for the plugin\n  platforms: ['Android', 'iOS'], // Array of platforms supported, example: ['Android', 'iOS']\n  install: '', // OPTIONAL install command, in case the plugin requires variables\n})\n\n\nexport class Tealium extends IonicNativePlugin {\n\n  /**\n   * This function initializes the Tealium Cordova plugin. \n   * This should usually be done inside the \"deviceReady\" handler.\n   * @param config {TealConfig}\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  init(config: TealConfig): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  /**\n   * This function tracks a view event in the Tealium Cordova plugin\n   * @param dataObject {any} The JSON data object containing your key-value pairs\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  trackView(dataObject: any, instanceName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function tracks a link event in the Tealium Cordova plugin\n   * @param dataObject {any} The JSON data object containing your key-value pairs\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  trackEvent(dataObject: any, instanceName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function tracks a custom event in the Tealium Cordova plugin\n   * @param eventType {string} The event type, link or view\n   * @param dataObject {any} The JSON data object containing your key-value pairs\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  track(eventType: string, dataObject: any, instanceName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function adds data to the Tealium persistent data store\n   * @param keyName {string} The key name that this data will be stored under for later retrieval\n   * @param value {any} The value to be stored as persistent data\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  addPersistent(keyName: string, value: string | string[] | any, instanceName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function adds data to the Tealium volatile data store\n   * @param keyName {string} The key name that this data will be stored under for later retrieval\n   * @param value {any} The value to be stored as volatile data\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  addVolatile(keyName: string, value: string | string[], instanceName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function removes data from the Tealium volatile data store\n   * @param keyName {string} The key name that this data will removed from the Tealium data store\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  removeVolatile(keyName: string, instanceName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function removes data from the Tealium persistent data store\n   * @param keyName {string} The key name that this data will removed from the Tealium data store\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  removePersistent(keyName: string, instanceName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function retrieves a value from the Tealium Persistent data store\n   * @param keyName {string} The key name that this data will retrieved from the Tealium data store\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @param callback {any} A callback function that will be called when the data has been retrieved\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  getPersistent(keyName: string, instanceName: string, callback: any): Promise<any> {\n    return;\n  }\n/**\n   * This function retrieves a value from the Tealium Volatile data store\n   * @param keyName {string} The key name that this data will retrieved from the Tealium data store\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @param callback {any} A callback function that will be called when the data has been retrieved\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  getVolatile(keyName: string, instanceName: string, callback: any): Promise<any> {\n    return;\n  }\n\n   /**\n   * This function adds a remote command for later execution \n   * @param commandName {string} The command name for this Remote Command\n   * @param instanceName {string} Your arbitrary Tealium instance name provided at init time\n   * @param callback {any} A callback function that will be called when the data has been retrieved\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  addRemoteCommand(commandName: string, instanceName: string, callback: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function retrieves the Tealium Visitor ID\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  getVisitorId(): Promise<any> {\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}