{"version":3,"sources":["../../../src/@ionic-native/plugins/siri-shortcuts/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAcxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0DG;AASH;IAAmC,iCAAiB;IAApD;;IAkEA,CAAC;IAjEG;;;;;;;;;;OAUG;IAEH,8BAAM,GAAN,UAAO,OAA4B;QACjC,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;OAUG;IAEH,+BAAO,GAAP,UAAQ,OAA4B;QAClC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,8BAAM,GAAN,UAAO,qBAAsC;QACzC,MAAM,CAAC;IACX,CAAC;IAED;;;OAGG;IAEH,iCAAS,GAAT;QACI,MAAM,CAAC;IACX,CAAC;IAED;;;OAGG;IAEH,4CAAoB,GAApB;QACI,MAAM,CAAC;IACX,CAAC;IACE,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IApDE;QADC,OAAO,EAAE;;;;+CAGT;IAcD;QADC,OAAO,EAAE;;;;gDAGT;IAQD;QADC,OAAO,EAAE;;;;+CAGT;IAOD;QADC,OAAO,EAAE;;;;kDAGT;IAOD;QADC,OAAO,EAAE;;;;6DAGT;IA3DQ,aAAa;QARzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,+BAA+B;YAC1C,IAAI,EAAE,gEAAgE;YACtE,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,aAAa,CAkEzB;IAAD,oBAAC;CAlED,AAkEC,CAlEkC,iBAAiB,GAkEnD;SAlEY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface SiriShortcut {\n    persistentIdentifier: string;\n    title: string;\n    userInfo: { [key: string]: string; };\n    suggestedInvocationPhrase: string;\n}\n\nexport interface SiriShortcutOptions extends SiriShortcut {\n    isEligibleForSearch?: boolean;\n    isEligibleForPrediction?: boolean;\n}\n\n/**\n * @beta\n * @name Siri Shortcuts\n * @description\n * This plugin only works when your app is built with XCode 10 Beta. Shortcuts will only appear on iOS-versions >= 12.0\n *\n * This plugin enables the use of Siri shortcuts in Cordova. Siri Shortcuts enable the user to perform certain actions by adding them to Siri.\n * After you have donated a shortcut to Siri, it will appear in the settings menu, after which the user is able to add the action. You can check\n * whether the user launched your app through a shortcut by calling `getActivatedShortcut()` when the app is resumed. It will return `null`\n * if it has not been launched by Siri, and if it did, it will return an object with `SiriShortcut` properties.\n *\n * @usage\n * ```typescript\n * import { SiriShortcuts } from '@ionic-native/siri-shortcuts';\n *\n *\n * constructor(private siriShortcuts: SiriShortcuts) { }\n *\n * ...\n *\n *\n * this.siriShortcuts.donate({\n *       persistentIdentifier: 'open-my-app',\n *       title: 'Open my app',\n *       suggestedInvocationPhrase: 'Open my app',\n *       userInfo: { username: 'username' },\n *       isEligibleForSearch: true,\n *       isEligibleForPrediction: true,\n *   })\n *   .then(() => console.log('Shortcut donated.'))\n *   .catch((error: any) => console.error(error));\n *\n * this.siriShortcuts.present({\n *       persistentIdentifier: 'open-my-app',\n *       title: 'Open my app',\n *       suggestedInvocationPhrase: 'Open my app',\n *       userInfo: { username: 'username' },\n *   })\n *   .then(() => console.log('Shortcut added.'))\n *   .catch((error: any) => console.error(error));\n *\n * this.siriShortcuts.remove('open-my-app')\n *   .then(() => console.log('Shortcut removed.'))\n *   .catch((error: any) => console.error(error));\n *\n * this.siriShortcuts.removeAll()\n *   .then(() => console.log('All shortcuts removed removed.'))\n *   .catch((error: any) => console.error(error));\n *\n * this.siriShortcuts.getActivatedShortcut()\n *   .then((data: SiriShortcut|null) => console.log(data))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n *\n * @interfaces\n * SiriShortcut\n * SiriShortcutOptions\n */\n@Plugin({\n  pluginName: 'SiriShortcuts',\n  plugin: 'cordova-plugin-siri-shortcuts',\n  pluginRef: 'cordova.plugins.SiriShortcuts',\n  repo: 'https://github.com/bartwesselink/cordova-plugin-siri-shortcuts',\n  platforms: ['iOS']\n})\n\nexport class SiriShortcuts extends IonicNativePlugin {\n    /**\n     * Donate shortcut to Siri\n     * @param {SiriShortcutOptions} options Options to specify for the donation\n     * @param {string} options.persistentIdentifier Specify an identifier to uniquely identify the shortcut, in order to be able to remove it\n     * @param {string} options.title Specify a title for the shortcut, which is visible to the user as the name of the shortcut\n     * @param {string} options.suggestedInvocationPhrase Specify the phrase to give the user some inspiration on what the shortcut to call\n     * @param {object} options.userInfo Provide a key-value object that contains information about the shortcut, this will be returned in the getActivatedShortcut method. It is not possible to use the persistentIdentifier key, it is used internally\n     * @param {boolean} options.isEligibleForSearch This value defaults to true, set this value to make it searchable in Siri\n     * @param {boolean} options.isEligibleForPrediction This value defaults to true, set this value to set whether the shortcut eligible for prediction\n     * @return Promise<void>\n     */\n    @Cordova()\n    donate(options: SiriShortcutOptions): Promise<void> {\n      return;\n    }\n\n    /**\n     * Present shortcut to the user, will popup a view controller asking the user to add it to Siri\n     * @param {SiriShortcutOptions} options Options to specify for the donation\n     * @param {string} options.persistentIdentifier Specify an identifier to uniquely identify the shortcut, in order to be able to remove it\n     * @param {string} options.title Specify a title for the shortcut, which is visible to the user as the name of the shortcut\n     * @param {string} options.suggestedInvocationPhrase Specify the phrase to give the user some inspiration on what the shortcut to call\n     * @param {object} options.userInfo Provide a key-value object that contains information about the shortcut, this will be returned in the getActivatedShortcut method. It is not possible to use the persistentIdentifier key, it is used internally\n     * @param {boolean} options.isEligibleForSearch This value defaults to true, set this value to make it searchable in Siri\n     * @param {boolean} options.isEligibleForPrediction This value defaults to true, set this value to set whether the shortcut eligible for prediction\n     * @return Promise<void>\n     */\n    @Cordova()\n    present(options: SiriShortcutOptions): Promise<void> {\n      return;\n    }\n\n    /**\n     * Remove shortcuts based on identifiers\n     * @param {string|string[]} persistentIdentifiers Specify which shortcut(s) to delete by their persistent identifiers\n     * @return Promise<void>\n     */\n    @Cordova()\n    remove(persistentIdentifiers: string|string[]): Promise<void> {\n        return;\n    }\n\n    /**\n     * Remove all shortcuts from the application\n     * @return Promise<void>\n     */\n    @Cordova()\n    removeAll(): Promise<void> {\n        return;\n    }\n\n    /**\n     * Get the current clicked user activity, and return `null` if none\n     * @return Promise<SiriShortcut|null>\n     */\n    @Cordova()\n    getActivatedShortcut(): Promise<SiriShortcut|null> {\n        return;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}