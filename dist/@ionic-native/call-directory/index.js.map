{"version":3,"sources":["../../../src/@ionic-native/plugins/call-directory/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAOxE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAWH;IAAmC,iCAAiB;IAApD;;IA+DA,CAAC;IA7DC;;;OAGG;IAEH,mCAAW,GAAX;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,yCAAiB,GAAjB,UAAkB,KAA+B;QAC/C,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,4CAAoB,GAApB,UAAqB,KAA+B;QAClD,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,+CAAuB,GAAvB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,mCAAW,GAAX;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,uCAAe,GAAf;QACE,MAAM,CAAC;IACT,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAvDA;QADC,OAAO,EAAE;;;;oDAGT;IAQD;QADC,OAAO,EAAE;;yCACe,KAAK;;0DAE7B;IAQD;QADC,OAAO,EAAE;;yCACkB,KAAK;;6DAEhC;IAOD;QADC,OAAO,EAAE;;;;gEAGT;IAOD;QADC,OAAO,EAAE;;;;oDAGT;IAOD;QADC,OAAO,EAAE;;;;wDAGT;IAxDU,aAAa;QAVzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,eAAe;YAC1B,IAAI,EAAE,iEAAiE;YACvE,OAAO,EAAE,gJAAgJ;YACzJ,gBAAgB,EAAE,CAAC,UAAU,EAAE,uCAAuC,CAAC;YACvE,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,aAAa,CA+DzB;IAAD,oBAAC;CA/DD,AA+DC,CA/DkC,iBAAiB,GA+DnD;SA/DY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface CallDirectoryItem {\n  label: string;\n  number: string;\n}\n\n/**\n * @name Call Directory\n * @description\n * This plugin can add phone numbers to an Callkit call directory extension. Call `reloadExtension` after using `addIdentification` and `removeIdentification`\n * to process the changes in the call directory extension.\n *\n * @usage\n * ```typescript\n * import { CallDirectory } from '@ionic-native/call-directory';\n *\n *\n * constructor(private callDirectory: CallDirectory) { }\n *\n *\n * let items = [{label: \"Hello\", number: \"123\"}];\n * this.callDirectory.addIdentification(items)\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * this.callDirectory.reloadExtension()\n *   .then(res: string) => console.log(res))\n *   .catch((error: any) => console.error(error));\n * ```\n */\n@Plugin({\n  pluginName: 'CallDirectory',\n  plugin: 'cordova-plugin-call-directory',\n  pluginRef: 'CallDirectory',\n  repo: 'https://github.com/GEDYSIntraWare/cordova-plugin-call-directory',\n  install: 'cordova plugin add cordova-plugin-call-directory --variable EXT_NAME=\"Cordova-Directory\" --variable ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=\"NO\"',\n  installVariables: ['EXT_NAME', 'ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'],\n  platforms: ['iOS']\n})\n\nexport class CallDirectory extends IonicNativePlugin {\n\n  /**\n   * Check if the call directory extension is available and enabled\n   * @return {Promise<boolean>} Returns a promise with result\n   */\n  @Cordova()\n  isAvailable(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Add identification numbers\n   * @param {Array<CallDirectoryItem>} items Set of numbers with labels\n   * @return {Promise<any>} Returns a promise that resolves when numbers are added\n   */\n  @Cordova()\n  addIdentification(items: Array<CallDirectoryItem>): Promise<any> {\n    return;\n  }\n\n  /**\n   * Remove identification numbers\n   * @param {Array<CallDirectoryItem>} items Set of numbers with arbitrary label\n   * @return {Promise<any>} Returns a promise that resolves when numbers are removed\n   */\n  @Cordova()\n  removeIdentification(items: Array<CallDirectoryItem>): Promise<any> {\n    return;\n  }\n\n  /**\n   * Remove all items from call directory. Refreshes immediately.\n   * @return {Promise<any>} Returns a promise after refresh with message\n   */\n  @Cordova()\n  removeAllIdentification(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get all numbers and labels in call directory\n   * @return {Array<CallDirectoryItem>} Returns a promise that resolves with an array of all items\n   */\n  @Cordova()\n  getAllItems(): Promise<Array<CallDirectoryItem>> {\n    return;\n  }\n\n  /**\n   * Reload extension to process queued changes\n   * @return {Promise<string>} Returns a promise after refresh with message\n   */\n  @Cordova()\n  reloadExtension(): Promise<string> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}