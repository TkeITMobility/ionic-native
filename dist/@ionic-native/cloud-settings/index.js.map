{"version":3,"sources":["../../../src/@ionic-native/plugins/cloud-settings/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AAYH;IAAmC,iCAAiB;IAApD;;IAuDA,CAAC;IAtDC;;;OAGG;IAEH,8BAAM,GAAN;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAKH,4BAAI,GAAJ,UAAK,QAAa,EAAE,SAAmB;QACrC,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,4BAAI,GAAJ;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,iCAAS,GAAT,UAAU,OAAiB,IAAS,CAAC;IAErC;;;OAGG;IAEH,mCAAW,GAAX;QACE,MAAM,CAAC;IACT,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAhDA;QADC,OAAO,EAAE;;;;+CAGT;IAaD;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;6CAGD;IAOD;QADC,OAAO,EAAE;;;;6CAGT;IAOD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;yCACL,QAAQ;;kDAAU;IAOrC;QADC,OAAO,EAAE;;;;oDAGT;IAhDU,aAAa;QAXzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,8BAA8B;YACzC,IAAI,EAAE,yDAAyD;YAC/D,OAAO,EACL,uGAAuG;YACzG,gBAAgB,EAAE,CAAC,4BAA4B,CAAC;YAChD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,aAAa,CAuDzB;IAAD,oBAAC;CAvDD,AAuDC,CAvDkC,iBAAiB,GAuDnD;SAvDY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name Cloud Settings\n * @description\n * Stores app settings in cloud storage so if the user re-installs the app or installs it on a different device, the settings will be restored and available in the new installation.\n *\n * @usage\n * ```typescript\n * import { CloudSettings } from '@ionic-native/cloud-settings';\n *\n *\n * constructor(private cloudSettings: CloudSettings) { }\n *\n * ...\n *\n * this.cloudSettings.exists()\n *   .then((exists: boolean) => console.log(\"Saved settings exist: \" + exists) )\n *\n * this.cloudSettings.load()\n *   .then((settings: any) => this.settings = settings)\n *   .catch((error: any) => console.error(error));\n *\n * this.cloudSettings.save(this.settings)\n *   .then((savedSettings: any) => console.log(\"Saved settings: \" + JSON.stringify(savedSettings)))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'CloudSettings',\n  plugin: 'cordova-plugin-cloud-settings',\n  pluginRef: 'cordova.plugin.cloudsettings',\n  repo: 'https://github.com/dpa99c/cordova-plugin-cloud-settings',\n  install:\n    'ionic cordova plugin add cordova-plugin-cloud-settings --variable ANDROID_BACKUP_SERVICE_KEY=myapikey',\n  installVariables: ['ANDROID_BACKUP_SERVICE_KEY'],\n  platforms: ['Android', 'iOS']\n})\n\nexport class CloudSettings extends IonicNativePlugin {\n  /**\n   * Indicates if any stored cloud settings currently exist for the current user.\n   * @return {Promise<boolean>} Will be passed a boolean flag which indicates whether an store settings exist for the user.\n   */\n  @Cordova()\n  exists(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Saves the settings to cloud backup.\n   * @param {object} settings - a JSON structure representing the user settings to save to cloud backup.\n   * @param {boolean} [overwrite] - (optional) if true, existing settings will be replaced rather than updated. Defaults to false.\n   * If false, existing settings will be merged with the new settings passed to this function.\n   * @return {Promise<any>} Will be passed a single object argument which contains the saved settings as a JSON object.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  save(settings: any, overwrite?: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Loads the current settings.\n   * @return {Promise<any>} Will be passed a single object argument which contains the saved settings as a JSON object.\n   */\n  @Cordova()\n  load(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Registers a function which will be called if/when settings on the device have been updated from the cloud.\n   * @param {Function} handler - callback function to invoke when device settings have been updated from the cloud.\n   */\n  @Cordova({ sync: true })\n  onRestore(handler: Function): void {}\n\n  /**\n   * Outputs verbose log messages from the native plugin components to the JS console.\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  enableDebug(): Promise<void> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}