{"version":3,"sources":["../../../src/@ionic-native/plugins/firebase-config/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;;GAqBG;AASH;IAAoC,kCAAiB;IAArD;;IAiEA,CAAC;IAhEC;;;;;OAKG;IAEH,+BAAM,GAAN,UAAO,UAAkB;QACvB,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,mCAAU,GAAV,UAAW,GAAW,EAAE,SAAkB;QACxC,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,kCAAS,GAAT,UAAU,GAAW,EAAE,SAAkB;QACvC,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,kCAAS,GAAT,UAAU,GAAW,EAAE,SAAkB;QACvC,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,iCAAQ,GAAR,UAAS,GAAW,EAAE,SAAkB;QACtC,MAAM,CAAC;IACT,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAxDA;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;gDAGvB;IAUD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;oDAGvB;IAUD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;mDAGvB;IAUD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;mDAGvB;IAUD;QADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;kDAGvB;IA1DU,cAAc;QAR1B,MAAM,CAAC;YACN,UAAU,EAAE,gBAAgB;YAC5B,MAAM,EAAE,gCAAgC;YACxC,SAAS,EAAE,iCAAiC;YAC5C,IAAI,EAAE,8DAA8D;YACpE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,cAAc,CAiE1B;IAAD,qBAAC;CAjED,AAiEC,CAjEmC,iBAAiB,GAiEpD;SAjEY,cAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @beta\n * @name Firebase Config\n * @description\n * Cordova plugin for Firebase Config\n *\n * @usage\n * ```typescript\n * import { FirebaseConfig } from '@ionic-native/firebase-config';\n *\n *\n * constructor(private firebaseConfig: FirebaseConfig) { }\n *\n * ...\n *\n *\n * this.firebaseConfig.getBoolean('my_key')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'FirebaseConfig',\n  plugin: 'cordova-plugin-firebase-config',\n  pluginRef: 'cordova.plugins.firebase.config',\n  repo: 'https://github.com/chemerisuk/cordova-plugin-firebase-config',\n  platforms: ['Android', 'iOS']\n})\n\nexport class FirebaseConfig extends IonicNativePlugin {\n  /**\n   * Fetches remote config values with appropriate TTL and then activates them.\n   *\n   * @param {number} ttlSeconds\n   * @returns {Promise<null>}\n   */\n  @Cordova({ sync: true })\n  update(ttlSeconds: number): Promise<null> {\n    return;\n  }\n\n  /**\n   * Fetches a boolean configuration value from RemoteConfig\n   *\n   * @param {string} key\n   * @param {string} [namespace]\n   * @returns {Promise<boolean>}\n   */\n  @Cordova({ sync: true })\n  getBoolean(key: string, namespace?: string): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Fetches a string configuration value from RemoteConfig\n   *\n   * @param {string} key\n   * @param {string} [namespace]\n   * @returns {Promise<boolean>}\n   */\n  @Cordova({ sync: true })\n  getString(key: string, namespace?: string): Promise<string> {\n    return;\n  }\n\n  /**\n   * Fetches a numeric configuration value from RemoteConfig\n   *\n   * @param {string} key\n   * @param {string} [namespace]\n   * @returns {Promise<boolean>}\n   */\n  @Cordova({ sync: true })\n  getNumber(key: string, namespace?: string): Promise<number> {\n    return;\n  }\n\n  /**\n   * Fetches an array of bytes configuration value from RemoteConfig\n   *\n   * @param {string} key\n   * @param {string} [namespace]\n   * @returns {Promise<boolean>}\n   */\n  @Cordova({ sync: true })\n  getBytes(key: string, namespace?: string): Promise<any[]> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}