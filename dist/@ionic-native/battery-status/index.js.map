{"version":3,"sources":["../../../src/@ionic-native/plugins/battery-status/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAc7C;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AASH;IAAmC,iCAAiB;IAApD;;IA0CA,CAAC;IAzCC;;;OAGG;IAKH,gCAAQ,GAAR;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAKH,6BAAK,GAAL;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAKH,kCAAU,GAAV;QACE,MAAM,CAAC;IACT,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAhCA;QAJC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,eAAe;SACvB,CAAC;;;wCACU,UAAU;iDAErB;IAUD;QAJC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,YAAY;SACpB,CAAC;;;wCACO,UAAU;8CAElB;IAUD;QAJC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,iBAAiB;SACzB,CAAC;;;wCACY,UAAU;mDAEvB;IAnCU,aAAa;QARzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,mBAAmB;YAC9B,IAAI,EAAE,yDAAyD;YAC/D,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;SACpD,CAAC;OAEW,aAAa,CA0CzB;IAAD,oBAAC;CA1CD,AA0CC,CA1CkC,iBAAiB,GA0CnD;SA1CY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface BatteryStatusResponse {\n  /**\n   * The battery charge percentage\n   */\n  level: number;\n\n  /**\n   * A boolean that indicates whether the device is plugged in\n   */\n  isPlugged: boolean;\n}\n\n/**\n * @name Battery Status\n * @description\n * Requires Cordova plugin: cordova-plugin-batterystatus. For more info, please see the [BatteryStatus plugin docs](https://github.com/apache/cordova-plugin-battery-status).\n *\n * @usage\n * ```typescript\n * import { BatteryStatus } from '@ionic-native/battery-status';\n *\n * constructor(private batteryStatus: BatteryStatus) { }\n *\n * ...\n *\n *\n * // watch change in battery status\n * const subscription = this.batteryStatus.onChange().subscribe(status => {\n *    console.log(status.level, status.isPlugged);\n * });\n *\n * // stop watch\n * subscription.unsubscribe();\n *\n * ```\n * @interfaces\n * BatteryStatusResponse\n */\n@Plugin({\n  pluginName: 'BatteryStatus',\n  plugin: 'cordova-plugin-battery-status',\n  pluginRef: 'navigator.battery',\n  repo: 'https://github.com/apache/cordova-plugin-battery-status',\n  platforms: ['iOS', 'Android', 'Windows', 'Browser']\n})\n\nexport class BatteryStatus extends IonicNativePlugin {\n  /**\n   * Watch the change in battery level\n   * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'batterystatus'\n  })\n  onChange(): Observable<BatteryStatusResponse> {\n    return;\n  }\n\n  /**\n   * Watch when the battery level goes low\n   * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'batterylow'\n  })\n  onLow(): Observable<BatteryStatusResponse> {\n    return;\n  }\n\n  /**\n   * Watch when the battery level goes to critical\n   * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'batterycritical'\n  })\n  onCritical(): Observable<BatteryStatusResponse> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}