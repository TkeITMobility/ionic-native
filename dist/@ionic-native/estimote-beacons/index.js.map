{"version":3,"sources":["../../../src/@ionic-native/plugins/estimote-beacons/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface EstimoteBeaconRegion {\n  state?: string;\n\n  major: number;\n\n  minor: number;\n\n  identifier?: string;\n\n  uuid: string;\n}\n\n/**\n * @name Estimote Beacons\n *\n * @description\n * This plugin enables communication between a phone and Estimote Beacons peripherals.\n *\n * @usage\n * ```typescript\n * import { EstimoteBeacons } from '@ionic-native/estimote-beacons';\n *\n * constructor(private eb: EstimoteBeacons) { }\n *\n * ...\n *\n * this.eb.requestAlwaysAuthorization();\n *\n * this.eb.enableAnalytics(true);\n *\n * ```\n *\n * @interfaces\n * EstimoteBeaconRegion\n */\n@Plugin({\n  pluginName: 'EstimoteBeacons',\n  plugin: 'cordova-plugin-estimote',\n  pluginRef: 'estimote.beacons',\n  repo: 'https://github.com/evothings/phonegap-estimotebeacons',\n  platforms: ['Android', 'iOS']\n})\n\nexport class EstimoteBeacons extends IonicNativePlugin {\n  /** Proximity value */\n  ProximityUnknown = 0;\n\n  /** Proximity value */\n  ProximityImmediate = 1;\n\n  /** Proximity value */\n  ProximityNear = 2;\n\n  /** Proximity value */\n  ProximityFar = 3;\n\n  /** Beacon colour */\n  BeaconColorUnknown = 0;\n\n  /** Beacon colour */\n  BeaconColorMintCocktail = 1;\n\n  /** Beacon colour */\n  BeaconColorIcyMarshmallow = 2;\n\n  /** Beacon colour */\n  BeaconColorBlueberryPie = 3;\n\n  /**\n   * Beacon colour.\n   */\n  BeaconColorSweetBeetroot = 4;\n\n  /** Beacon colour */\n  BeaconColorCandyFloss = 5;\n\n  /** Beacon colour */\n  BeaconColorLemonTart = 6;\n\n  /** Beacon colour */\n  BeaconColorVanillaJello = 7;\n\n  /** Beacon colour */\n  BeaconColorLiquoriceSwirl = 8;\n\n  /** Beacon colour */\n  BeaconColorWhite = 9;\n\n  /** Beacon colour */\n  BeaconColorTransparent = 10;\n\n  /** Region state */\n  RegionStateUnknown = 'unknown';\n\n  /** Region state */\n  RegionStateOutside = 'outside';\n\n  /** Region state */\n  RegionStateInside = 'inside';\n\n  /**\n   * Ask the user for permission to use location services\n   * while the app is in the foreground.\n   * You need to call this function or requestAlwaysAuthorization\n   * on iOS 8+.\n   * Does nothing on other platforms.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.requestWhenInUseAuthorization().then(\n   *   () => { console.log('on success'); },\n   *   () => { console.log('on error'); }\n   * );\n   * ```\n   *\n   * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  requestWhenInUseAuthorization(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Ask the user for permission to use location services\n   * whenever the app is running.\n   * You need to call this function or requestWhenInUseAuthorization\n   * on iOS 8+.\n   * Does nothing on other platforms.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.requestAlwaysAuthorization().then(\n   *   () => { console.log('on success'); },\n   *   () => { console.log('on error'); }\n   * );\n   * ```\n   *\n   * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  requestAlwaysAuthorization(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get the current location authorization status.\n   * Implemented on iOS 8+.\n   * Does nothing on other platforms.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.authorizationStatus().then(\n   *   (result) => { console.log('Location authorization status: ' + result); },\n   *   (errorMessage) => { console.log('Error: ' + errorMessage); }\n   * );\n   * ```\n   *\n   * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  authorizationStatus(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start advertising as a beacon.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')\n   *    .then(() => { console.log('Beacon started'); });\n   * setTimeout(() => {\n   *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });\n   * }, 5000);\n   * ```\n   * @param {string} uuid UUID string the beacon should advertise (mandatory).\n   * @param {number} major Major value to advertise (mandatory).\n   * @param {number} minor Minor value to advertise (mandatory).\n   * @param {string} regionId Identifier of the region used to advertise (mandatory).\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    clearFunction: 'stopAdvertisingAsBeacon'\n  })\n  startAdvertisingAsBeacon(\n    uuid: string,\n    major: number,\n    minor: number,\n    regionId: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Stop advertising as a beacon.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')\n   *    .then(() => { console.log('Beacon started'); });\n   * setTimeout(() => {\n   *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });\n   * }, 5000);\n   * ```\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopAdvertisingAsBeacon(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Enable analytics.\n   *\n   * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.enableAnalytics(true).then(() => { console.log('Analytics enabled'); });\n   * ```\n   * @param {number} enable Boolean value to turn analytics on or off (mandatory).\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  enableAnalytics(enable: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Test if analytics is enabled.\n   *\n   * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.isAnalyticsEnabled().then((enabled) => { console.log('Analytics enabled: ' + enabled); });\n   * ```\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  isAnalyticsEnabled(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Test if App ID and App Token is set.\n   *\n   * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.isAuthorized().then((isAuthorized) => { console.log('App ID and App Token is set: ' + isAuthorized); });\n   * ```\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  isAuthorized(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set App ID and App Token.\n   *\n   * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.setupAppIDAndAppToken('MyAppID', 'MyAppToken').then(() => { console.log('AppID and AppToken configured!'); });\n   * ```\n   * @param {string} appID The App ID (mandatory).\n   * @param {string} appToken The App Token (mandatory).\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setupAppIDAndAppToken(appID: string, appToken: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start scanning for all nearby beacons using CoreBluetooth (no region object is used).\n   * Available on iOS.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {\n   *   console.log(JSON.stringify(beacons));\n   * });\n   * setTimeout(() => {\n   *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });\n   * }, 5000);\n   * ```\n   * @returns {Observable<any>} Returns an Observable that notifies of each beacon discovered.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopEstimoteBeaconDiscovery'\n  })\n  startEstimoteBeaconDiscovery(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Stop CoreBluetooth scan. Available on iOS.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {\n   *   console.log(JSON.stringify(beacons));\n   * });\n   * setTimeout(() => {\n   *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });\n   * }, 5000);\n   * ```\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopEstimoteBeaconDiscovery(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start ranging beacons. Available on iOS and Android.\n   *\n   * @usage\n   * ```\n   * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n   * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {\n   *   console.log(JSON.stringify(info));\n   * });\n   * setTimeout(() => {\n   *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });\n   * }, 5000);\n   * ```\n   * @param {EstimoteBeaconRegion} region Dictionary with region properties (mandatory).\n   * @returns {Observable<any>} Returns an Observable that notifies of each beacon discovered.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopRangingBeaconsInRegion',\n    clearWithArgs: true\n  })\n  startRangingBeaconsInRegion(region: EstimoteBeaconRegion): Observable<any> {\n    return;\n  }\n\n  /**\n   * Stop ranging beacons. Available on iOS and Android.\n   *\n   * @usage\n   * ```\n   * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n   * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {\n   *   console.log(JSON.stringify(info));\n   * });\n   * setTimeout(() => {\n   *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });\n   * }, 5000);\n   * ```\n   * @param {EstimoteBeaconRegion} region Dictionary with region properties (mandatory).\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopRangingBeaconsInRegion(region: EstimoteBeaconRegion): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start ranging secure beacons. Available on iOS.\n   * This function has the same parameters/behavior as\n   * {@link EstimoteBeacons.startRangingBeaconsInRegion}.\n   * To use secure beacons set the App ID and App Token using\n   * {@link EstimoteBeacons.setupAppIDAndAppToken}.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopRangingSecureBeaconsInRegion',\n    clearWithArgs: true\n  })\n  startRangingSecureBeaconsInRegion(\n    region: EstimoteBeaconRegion\n  ): Observable<any> {\n    return;\n  }\n\n  /**\n   * Stop ranging secure beacons. Available on iOS.\n   * This function has the same parameters/behavior as\n   * {@link EstimoteBeacons.stopRangingBeaconsInRegion}.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopRangingSecureBeaconsInRegion(region: EstimoteBeaconRegion): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start monitoring beacons. Available on iOS and Android.\n   *\n   * @usage\n   * ```\n   * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n   * EstimoteBeacons.startMonitoringForRegion(region).subscribe(state => {\n   *   console.log('Region state: ' + JSON.stringify(state));\n   * });\n   * ```\n   * @param {EstimoteBeaconRegion} region Dictionary with region properties (mandatory).\n   * @param {boolean} [notifyEntryStateOnDisplay] Set to true to detect if you\n   * are inside a region when the user turns display on, see\n   * {@link https://developer.apple.com/library/prerelease/ios/documentation/CoreLocation/Reference/CLBeaconRegion_class/index.html#//apple_ref/occ/instp/CLBeaconRegion/notifyEntryStateOnDisplay|iOS documentation}\n   * for further details (iOS only).\n   * @returns {Observable<any>} Returns an Observable that notifies of each region state discovered.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopMonitoringForRegion',\n    clearWithArgs: true,\n    successIndex: 1,\n    errorIndex: 2\n  })\n  startMonitoringForRegion(\n    region: EstimoteBeaconRegion,\n    notifyEntryStateOnDisplay: boolean\n  ): Observable<any> {\n    return;\n  }\n\n  /**\n   * Stop monitoring beacons. Available on iOS and Android.\n   *\n   * @usage\n   * ```\n   * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n   * EstimoteBeacons.stopMonitoringForRegion(region).then(() => { console.log('monitoring is stopped'); });\n   * ```\n   * @param {EstimoteBeaconRegion} region Dictionary with region properties (mandatory).\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopMonitoringForRegion(region: EstimoteBeaconRegion): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start monitoring secure beacons. Available on iOS.\n   * This function has the same parameters/behavior as\n   * EstimoteBeacons.startMonitoringForRegion.\n   * To use secure beacons set the App ID and App Token using\n   * {@link EstimoteBeacons.setupAppIDAndAppToken}.\n   * @see {@link EstimoteBeacons.startMonitoringForRegion}\n   * @param {EstimoteBeaconRegion} region Region\n   * @param {boolean} notifyEntryStateOnDisplay\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopSecureMonitoringForRegion',\n    clearWithArgs: true,\n    successIndex: 1,\n    errorIndex: 2\n  })\n  startSecureMonitoringForRegion(\n    region: EstimoteBeaconRegion,\n    notifyEntryStateOnDisplay: boolean\n  ): Observable<any> {\n    return;\n  }\n\n  /**\n   * Stop monitoring secure beacons. Available on iOS.\n   * This function has the same parameters/behavior as\n   * {@link EstimoteBeacons.stopMonitoringForRegion}.\n   * @param {EstimoteBeaconRegion} region Region\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopSecureMonitoringForRegion(region: EstimoteBeaconRegion): Promise<any> {\n    return;\n  }\n\n  /**\n   * Connect to Estimote Beacon. Available on Android.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.connectToBeacon(FF:0F:F0:00:F0:00);\n   * ```\n   * ```\n   * EstimoteBeacons.connectToBeacon({\n   *     proximityUUID: '000000FF-F00F-0FF0-F000-000FF0F00000',\n   *     major: 1,\n   *     minor: 1\n   *   });\n   * ```\n   * @param {Beacon} beacon Beacon to connect to.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  connectToBeacon(beacon: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Disconnect from connected Estimote Beacon. Available on Android.\n   *\n   * @usage\n   * ```\n   * EstimoteBeacons.disconnectConnectedBeacon();\n   * ```\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  disconnectConnectedBeacon(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Write proximity UUID to connected Estimote Beacon. Available on Android.\n   *\n   * @usage\n   * ```\n   * // Example that writes constant ESTIMOTE_PROXIMITY_UUID\n   * EstimoteBeacons.writeConnectedProximityUUID(ESTIMOTE_PROXIMITY_UUID);\n   *\n   * @param {string} uuid String to write as new UUID\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  writeConnectedProximityUUID(uuid: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Write major to connected Estimote Beacon. Available on Android.\n   *\n   * @usage\n   * ```\n   * // Example that writes 1\n   * EstimoteBeacons.writeConnectedMajor(1);\n   *\n   * @param {number} major number to write as new major\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  writeConnectedMajor(major: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Write minor to connected Estimote Beacon. Available on Android.\n   *\n   * @usage\n   * ```\n   * // Example that writes 1\n   * EstimoteBeacons.writeConnectedMinor(1);\n   *\n   * @param {number} minor number to write as new minor\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  writeConnectedMinor(minor: number): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}