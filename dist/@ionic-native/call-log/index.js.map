{"version":3,"sources":["../../../src/@ionic-native/plugins/call-log/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAQxE;;;;;;;;;;;;;;;;GAgBG;AASH;IAA6B,2BAAiB;IAA9C;;IAsCA,CAAC;IArCC;;;;OAIG;IAEH,4BAAU,GAAV,UAAW,OAAwB;QACjC,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAIH,mCAAiB,GAAjB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAIH,uCAAqB,GAArB;QACE,MAAM,CAAC;IACT,CAAC;IACI,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA9BA;QADC,OAAO,EAAE;;;;6CAGT;IASD;QAHC,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;;;;oDAGD;IASD;QAHC,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;;;;wDAGD;IA/BU,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,wBAAwB;YAChC,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,yDAAyD;YAC/D,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;OAEW,OAAO,CAsCnB;IAAD,cAAC;CAtCD,AAsCC,CAtC4B,iBAAiB,GAsC7C;SAtCY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface CallLogObject {\n  name: string;\n  value: string | Array<string>;\n  operator: '==' | '!=' | '>' | '>=' | '<' | '<=' | 'like';\n}\n\n/**\n * @name Call Log\n * @description\n * This plugin access the call history on a device and that can be filtered\n *\n * @usage\n * ```typescript\n * import { CallLog } from '@ionic-native/call-log';\n *\n *\n * constructor(private callLog: CallLog) { }\n *\n * ````\n * @interfaces\n * CallLogObject\n *\n */\n@Plugin({\n  pluginName: 'CallLog',\n  plugin: 'cordova-plugin-calllog',\n  pluginRef: 'plugins.callLog',\n  repo: 'https://github.com/creacore-team/cordova-plugin-calllog',\n  platforms: ['Android']\n})\n\nexport class CallLog extends IonicNativePlugin {\n  /**\n   * This function return the call logs\n   * @param {CallLogObject[]} filters array of object to filter the query\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getCallLog(filters: CallLogObject[]): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check permission\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  hasReadPermission(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Request permission\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  requestReadPermission(): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}